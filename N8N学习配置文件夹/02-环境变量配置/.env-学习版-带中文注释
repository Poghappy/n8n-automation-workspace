# ========================================
# N8N 自动化工作流系统 环境变量配置文件
# ========================================
#
# 这个文件包含了 N8N 系统运行所需的所有环境变量配置
# 
# 重要提示：
# 1. 这是一个模板文件，实际使用时需要复制为 .env 文件
# 2. 所有密码和密钥都需要替换为实际的安全值
# 3. 生产环境中绝不要将此文件提交到版本控制系统
# 4. 建议使用 Docker Secrets 或其他安全方式管理敏感信息
#
# 学习要点：
# - 环境变量的命名规范和分类
# - 安全配置的最佳实践
# - 不同服务间的配置关联
# - 密钥生成和管理方法
# ========================================

# ========================================
# 基础网络和域名配置
# ========================================
# 这些配置决定了 N8N 服务的网络访问方式

# 主域名 - 生产环境中应该是你的实际域名
# 示例：example.com, mycompany.com
DOMAIN_NAME=localhost

# 子域名 - N8N 服务的子域名前缀
# 最终访问地址将是：http://n8n.localhost 或 https://n8n.example.com
SUBDOMAIN=n8n

# 协议类型 - 生产环境建议使用 https
# 可选值：http, https
N8N_PROTOCOL=http

# ========================================
# N8N 用户认证配置
# ========================================
# 这些配置控制用户如何登录和访问 N8N 系统

# 管理员用户名 - 系统默认管理员账号
# 建议：使用复杂的用户名，避免使用 admin
N8N_BASIC_AUTH_USER=admin

# 管理员密码 - 系统默认管理员密码
# 安全要求：
# - 至少12位字符
# - 包含大小写字母、数字和特殊字符
# - 定期更换
# 生成方法：openssl rand -base64 32
N8N_BASIC_AUTH_PASSWORD=ewz61dhA8gMC81+Af/0kJQ==

# ========================================
# N8N 安全加密配置
# ========================================
# 这些密钥用于保护系统中的敏感数据

# 数据加密密钥 - 用于加密存储在数据库中的敏感信息
# 重要性：极其重要，丢失此密钥将导致无法解密已存储的凭据
# 生成方法：openssl rand -hex 32
# 注意：一旦设置，不要轻易更改
N8N_ENCRYPTION_KEY=a1b2c3d4e5f6789012345678901234567890abcd

# JWT 签名密钥 - 用于用户会话管理和API认证
# 用途：签名和验证用户登录令牌
# 生成方法：openssl rand -base64 32
# 安全建议：定期轮换此密钥
N8N_USER_MANAGEMENT_JWT_SECRET=dD1beZM+UxZFhnibkDG7CA==

# ========================================
# PostgreSQL 数据库配置
# ========================================
# N8N 使用 PostgreSQL 作为主数据库存储工作流、执行历史等数据

# 数据库管理员密码 - PostgreSQL 超级用户密码
# 用途：数据库管理和维护
# 安全要求：高强度密码，严格控制访问
POSTGRES_PASSWORD=dD1beZM+UxZFhnibkDG7CA==

# 应用数据库用户名 - N8N 连接数据库使用的用户名
# 建议：使用专门的应用用户，而不是超级用户
POSTGRES_USER=n8n

# 应用数据库名称 - N8N 使用的数据库名称
# 建议：使用描述性的名称
POSTGRES_DB=n8n

# 应用用户密码 - N8N 连接数据库使用的密码
# 安全原则：与管理员密码不同，遵循最小权限原则
POSTGRES_NON_ROOT_PASSWORD=dD1beZM+UxZFhnibkDG7CA==

# ========================================
# Redis 缓存配置
# ========================================
# Redis 用于提供缓存和队列功能，提升系统性能

# Redis 访问密码 - 保护 Redis 实例的安全
# 用途：防止未授权访问缓存数据
# 生成方法：openssl rand -base64 24
REDIS_PASSWORD=nDRCjw7OC0Ed0KLOor8b3A==

# ========================================
# AI 智能体配置
# ========================================
# 这些配置用于集成 AI 功能，提供智能化的工作流建议和优化

# OpenAI API 配置
# OpenAI API 密钥 - 用于访问 GPT 模型
# 获取方式：从 OpenAI 官网申请
# 注意：这是付费服务，请控制使用量
OPENAI_API_KEY=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

# AI 模型选择 - 使用的 GPT 模型版本
# 可选值：gpt-3.5-turbo, gpt-4, gpt-4-turbo
# 建议：根据需求和成本选择合适的模型
OPENAI_MODEL=gpt-4

# 最大令牌数 - 单次 AI 请求的最大令牌数
# 影响：控制 AI 响应的长度和成本
# 建议：根据实际需求调整
OPENAI_MAX_TOKENS=4000

# AI 创造性参数 - 控制 AI 响应的随机性
# 范围：0.0-2.0，0表示确定性，2表示高创造性
# 建议：0.7 是一个平衡的值
OPENAI_TEMPERATURE=0.7

# 智能体行为配置
# 智能体模式 - 定义 AI 智能体的工作模式
# 可选值：passive（被动）, active（主动）, hybrid（混合）
AGENT_MODE=hybrid

# 智能体角色 - 定义 AI 智能体在系统中的角色
# 可选值：assistant（助手）, advisor（顾问）, executive（执行者）
AGENT_ROLE=executive

# 最大并发工作流数 - 智能体同时处理的工作流数量限制
# 用途：控制系统负载和资源使用
MAX_CONCURRENT_WORKFLOWS=10

# 启用自动学习 - 是否允许智能体从执行结果中学习
# 用途：提升智能体的建议质量
ENABLE_AUTO_LEARNING=true

# 启用监控 - 是否启用智能体性能监控
# 用途：跟踪智能体的工作效果
ENABLE_MONITORING=true

# 学习和推荐配置
# 学习率 - 智能体学习新知识的速度
# 范围：0.0-1.0，值越大学习越快但可能不稳定
LEARNING_RATE=0.1

# 推荐阈值 - 智能体提供建议的置信度阈值
# 范围：0.0-1.0，值越高建议越保守但准确性更高
RECOMMENDATION_THRESHOLD=0.8

# 知识更新间隔 - 智能体更新知识库的时间间隔（秒）
# 用途：控制知识库更新频率，平衡性能和时效性
KNOWLEDGE_UPDATE_INTERVAL=3600

# ========================================
# 火鸟门户系统集成配置
# ========================================
# 这些配置用于与火鸟门户系统进行集成

# 火鸟门户 URL - 火鸟系统的访问地址
HUONIAO_PORTAL_URL=http://localhost:8080

# 火鸟 API 密钥 - 用于访问火鸟系统 API
HUONIAO_API_KEY=your-huoniao-api-key

# 火鸟数据库配置
HUONIAO_DB_HOST=localhost      # 数据库服务器地址
HUONIAO_DB_PORT=3306           # 数据库端口（MySQL默认）
HUONIAO_DB_NAME=huoniao        # 数据库名称
HUONIAO_DB_USER=huoniao        # 数据库用户名
HUONIAO_DB_PASSWORD=huoniao123 # 数据库密码

# ========================================
# API 服务配置
# ========================================
# 这些配置控制 N8N API 服务的网络行为

# API 服务器配置
API_HOST=0.0.0.0    # 监听地址，0.0.0.0 表示监听所有网络接口
API_PORT=8000       # API 服务端口
API_WORKERS=4       # 工作进程数量，建议设置为 CPU 核心数
API_RELOAD=true     # 开发模式下启用自动重载

# WebSocket 配置
WEBSOCKET_PORT=8001 # WebSocket 服务端口，用于实时通信

# CORS（跨域资源共享）配置
# 允许的源地址列表 - 定义哪些域名可以访问 API
# 格式：JSON 数组字符串
# 安全建议：生产环境中只允许必要的域名
CORS_ORIGINS='["http://localhost:3000", "http://localhost:8080"]'

# 是否允许携带凭据 - 允许跨域请求携带 Cookie 等凭据
CORS_ALLOW_CREDENTIALS=true

# ========================================
# 安全认证配置
# ========================================
# 这些配置用于 API 访问的安全控制

# JWT（JSON Web Token）配置
# JWT 签名密钥 - 用于签名和验证 JWT 令牌
# 安全要求：至少32位随机字符
JWT_SECRET_KEY=your-jwt-secret-key

# JWT 签名算法 - 用于 JWT 令牌签名的算法
# 推荐：HS256（对称加密）或 RS256（非对称加密）
JWT_ALGORITHM=HS256

# 访问令牌有效期 - JWT 访问令牌的有效时间（分钟）
# 安全平衡：时间越短越安全，但用户体验可能受影响
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# 刷新令牌有效期 - JWT 刷新令牌的有效时间（天）
# 用途：允许用户在访问令牌过期后获取新令牌
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# 数据加密配置
# 通用加密密钥 - 用于加密敏感数据
# 要求：必须是32位字符
ENCRYPTION_KEY=your-encryption-key-32-chars-long

# 哈希盐值 - 用于密码哈希的盐值
# 用途：增强密码存储的安全性
HASH_SALT=your-hash-salt

# ========================================
# 日志配置
# ========================================
# 控制系统日志的输出和管理

# 日志文件路径 - 日志文件的存储位置
LOG_FILE_PATH=/var/log/n8n/app.log

# 日志级别 - 控制日志输出的详细程度
# 可选值：DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# 日志格式 - 定义日志输出的格式
# 包含：时间戳、记录器名称、日志级别、消息内容
LOG_FORMAT='%(asctime)s - %(name)s - %(levelname)s - %(message)s'

# 日志文件最大大小 - 单个日志文件的最大大小（MB）
LOG_MAX_SIZE=100

# 日志文件保留数量 - 保留的历史日志文件数量
LOG_BACKUP_COUNT=5

# ========================================
# 错误追踪配置（Sentry）
# ========================================
# 用于生产环境的错误监控和追踪

# Sentry DSN - Sentry 项目的数据源名称
# 获取方式：从 Sentry 项目设置中获取
SENTRY_DSN=your-sentry-dsn-here

# Sentry 环境标识 - 区分不同的部署环境
# 可选值：development, staging, production
SENTRY_ENVIRONMENT=production

# Sentry 采样率 - 错误采样的比例
# 范围：0.0-1.0，1.0表示捕获所有错误
SENTRY_SAMPLE_RATE=1.0

# ========================================
# 备份和恢复配置
# ========================================
# 控制系统数据的备份策略

# 是否启用自动备份
BACKUP_ENABLED=true

# 备份计划 - 使用 Cron 表达式定义备份时间
# 示例：'0 2 * * *' 表示每天凌晨2点执行备份
BACKUP_SCHEDULE='0 2 * * *'

# 备份保留天数 - 自动删除超过指定天数的备份
BACKUP_RETENTION_DAYS=30

# 备份存储路径 - 备份文件的存储位置
BACKUP_STORAGE_PATH=/var/backups/n8n

# ========================================
# 配置使用说明和最佳实践
# ========================================
#
# 1. 密钥生成命令：
#    - 生成随机密钥：openssl rand -hex 32
#    - 生成Base64密钥：openssl rand -base64 32
#    - 生成UUID：uuidgen
#
# 2. 安全最佳实践：
#    - 定期轮换所有密钥和密码
#    - 使用强密码策略
#    - 限制数据库和Redis的网络访问
#    - 启用HTTPS和SSL证书
#    - 定期备份配置和数据
#
# 3. 生产环境建议：
#    - 使用环境变量或密钥管理服务
#    - 启用日志监控和告警
#    - 配置防火墙和访问控制
#    - 定期安全审计
#    - 监控系统性能和资源使用
#
# 4. 开发环境配置：
#    - 可以使用较简单的密码（仅限开发）
#    - 启用详细日志（DEBUG级别）
#    - 使用自动重载功能
#    - 配置开发工具集成
#
# 5. 故障排除：
#    - 检查日志文件获取错误信息
#    - 验证数据库连接配置
#    - 确认端口没有被占用
#    - 检查防火墙和网络配置
# ========================================