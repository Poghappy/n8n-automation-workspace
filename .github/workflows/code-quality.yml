name: Code Quality Check

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行代码质量检查
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  PHP_VERSION: '8.1'

jobs:
  # JavaScript/TypeScript 代码质量
  javascript-quality:
    runs-on: ubuntu-latest
    name: JavaScript/TypeScript Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: |
        npm run lint:js -- --format=json --output-file=eslint-report.json
        npm run lint:js
      continue-on-error: true
      
    - name: Run Prettier check
      run: npm run format:check
      
    - name: Run TypeScript check
      run: npm run type-check
      continue-on-error: true
      
    - name: Run JSHint
      run: |
        npm install -g jshint
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" | xargs jshint
      continue-on-error: true
      
    - name: Upload ESLint results
      uses: actions/upload-artifact@v3
      with:
        name: eslint-report
        path: eslint-report.json

  # Python 代码质量
  python-quality:
    runs-on: ubuntu-latest
    name: Python Code Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint mypy bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run Flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --format=json --output-file=flake8-report.json
      continue-on-error: true
      
    - name: Run Black formatting check
      run: black --check --diff .
      continue-on-error: true
      
    - name: Run isort import sorting check
      run: isort --check-only --diff .
      continue-on-error: true
      
    - name: Run Pylint
      run: |
        pylint --output-format=json --reports=no **/*.py > pylint-report.json || true
        pylint **/*.py
      continue-on-error: true
      
    - name: Run MyPy type checking
      run: mypy . --ignore-missing-imports --json-report mypy-report
      continue-on-error: true
      
    - name: Run Bandit security linting
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . -f txt
      continue-on-error: true
      
    - name: Run Safety dependency check
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload Python quality reports
      uses: actions/upload-artifact@v3
      with:
        name: python-quality-reports
        path: |
          flake8-report.json
          pylint-report.json
          mypy-report/
          bandit-report.json
          safety-report.json

  # PHP 代码质量
  php-quality:
    runs-on: ubuntu-latest
    name: PHP Code Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
        tools: composer, phpcs, phpmd, phpstan, psalm
        
    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader
      
    - name: Run PHP CodeSniffer
      run: |
        ./vendor/bin/phpcs --standard=PSR12 --report=json --report-file=phpcs-report.json --ignore=vendor/ .
        ./vendor/bin/phpcs --standard=PSR12 --ignore=vendor/ .
      continue-on-error: true
      
    - name: Run PHP Mess Detector
      run: |
        ./vendor/bin/phpmd . json cleancode,codesize,controversial,design,naming,unusedcode --exclude vendor/ --reportfile phpmd-report.json
        ./vendor/bin/phpmd . text cleancode,codesize,controversial,design,naming,unusedcode --exclude vendor/
      continue-on-error: true
      
    - name: Run PHPStan
      run: |
        ./vendor/bin/phpstan analyse --error-format=json > phpstan-report.json || true
        ./vendor/bin/phpstan analyse
      continue-on-error: true
      
    - name: Run Psalm
      run: |
        ./vendor/bin/psalm --output-format=json --report=psalm-report.json
        ./vendor/bin/psalm
      continue-on-error: true
      
    - name: Upload PHP quality reports
      uses: actions/upload-artifact@v3
      with:
        name: php-quality-reports
        path: |
          phpcs-report.json
          phpmd-report.json
          phpstan-report.json
          psalm-report.json

  # 代码复杂度分析
  complexity-analysis:
    runs-on: ubuntu-latest
    name: Code Complexity Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install complexity analysis tools
      run: |
        npm install -g complexity-report jscpd
        
    - name: Run JavaScript complexity analysis
      run: |
        complexity-report --output json --format json --filepattern "**/*.js" --ignorepath .gitignore > js-complexity-report.json
        complexity-report --format plain --filepattern "**/*.js" --ignorepath .gitignore
      continue-on-error: true
      
    - name: Run code duplication detection
      run: |
        jscpd --output json --format json . > duplication-report.json
        jscpd .
      continue-on-error: true
      
    - name: Upload complexity reports
      uses: actions/upload-artifact@v3
      with:
        name: complexity-reports
        path: |
          js-complexity-report.json
          duplication-report.json

  # 依赖检查
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Security Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        npm ci
        pip install safety pip-audit
        
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json
        npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run Python safety check
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
      
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit
      continue-on-error: true
      
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          npm-audit-report.json
          safety-report.json
          pip-audit-report.json

  # 代码覆盖率检查
  coverage-check:
    runs-on: ubuntu-latest
    name: Code Coverage Check
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        npm ci
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage
        
    - name: Run JavaScript tests with coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        
    - name: Run Python tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info,./coverage.xml
        flags: unittests
        name: codecov-quality-check
        
    - name: Coverage comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}

  # 生成质量报告
  quality-report:
    runs-on: ubuntu-latest
    name: Generate Quality Report
    needs: [javascript-quality, python-quality, php-quality, complexity-analysis, dependency-check, coverage-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate quality report
      run: |
        echo "# 代码质量报告" > quality-report.md
        echo "" >> quality-report.md
        echo "## 检查结果概览" >> quality-report.md
        echo "" >> quality-report.md
        echo "| 检查项目 | 状态 |" >> quality-report.md
        echo "|---------|------|" >> quality-report.md
        echo "| JavaScript质量 | ${{ needs.javascript-quality.result }} |" >> quality-report.md
        echo "| Python质量 | ${{ needs.python-quality.result }} |" >> quality-report.md
        echo "| PHP质量 | ${{ needs.php-quality.result }} |" >> quality-report.md
        echo "| 复杂度分析 | ${{ needs.complexity-analysis.result }} |" >> quality-report.md
        echo "| 依赖检查 | ${{ needs.dependency-check.result }} |" >> quality-report.md
        echo "| 代码覆盖率 | ${{ needs.coverage-check.result }} |" >> quality-report.md
        echo "" >> quality-report.md
        echo "生成时间: $(date)" >> quality-report.md
        
    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.md
        
    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
