name: "CodeQL Advanced Security Scan"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每周日凌晨2点运行完整安全扫描
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  # CodeQL 分析
  codeql-analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
        # 支持的语言: 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # 自定义查询包
        queries: +security-and-quality
        # 配置文件路径
        config-file: ./.github/codeql/codeql-config.yml

    # 对于编译型语言，需要手动构建
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      if: matrix.language == 'javascript'

    # 对于Python，进行手动构建以包含更多代码路径
    - name: Manual build for Python
      if: matrix.language == 'python'
      run: |
        # 安装Python依赖以便CodeQL分析
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f 03-youtube-downloader/requirements.txt ]; then pip install -r 03-youtube-downloader/requirements.txt; fi
        if [ -f 04-ai-agents/requirements.txt ]; then pip install -r 04-ai-agents/requirements.txt; fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
        upload: true

  # 高级安全扫描
  advanced-security-scan:
    name: Advanced Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    # Semgrep 静态分析
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/python
          p/docker
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    # Bandit Python 安全扫描
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f sarif -o bandit-results.sarif --exclude ./node_modules,./venv,./vendor
      continue-on-error: true

    # 上传 Bandit 结果到 GitHub Security
    - name: Upload Bandit SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: bandit-results.sarif
        category: bandit

    # Snyk 漏洞扫描
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk-results.sarif --severity-threshold=medium
      continue-on-error: true

    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk-results.sarif
        category: snyk

    # Trivy 容器和文件系统扫描
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy

  # 密钥扫描
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # GitLeaks 密钥扫描
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    # TruffleHog 密钥扫描
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # 依赖扫描
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        pip install safety pip-audit

    # npm audit
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit-results.json
      continue-on-error: true

    # Python Safety 检查
    - name: Run Safety check
      run: |
        safety check --json --output safety-results.json
      continue-on-error: true

    # pip-audit 检查
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-results.json
      continue-on-error: true

    # OSV Scanner
    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          -r
          --skip-git
          .
        format: sarif
        output: osv-results.sarif
      continue-on-error: true

    - name: Upload OSV Scanner results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: osv-results.sarif
        category: osv-scanner

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          npm-audit-results.json
          safety-results.json
          pip-audit-results.json

  # 容器镜像扫描
  container-scan:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 构建测试镜像
    - name: Build test images
      run: |
        docker build -t test/n8n-core:latest ./01-n8n-automation-core
        docker build -t test/firebird-portal:latest ./02-firebird-portal
        docker build -t test/youtube-downloader:latest ./03-youtube-downloader
        docker build -t test/ai-agents:latest ./04-ai-agents

    # Trivy 容器镜像扫描
    - name: Scan N8N Core image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test/n8n-core:latest'
        format: 'sarif'
        output: 'trivy-n8n-core.sarif'

    - name: Scan Firebird Portal image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test/firebird-portal:latest'
        format: 'sarif'
        output: 'trivy-firebird-portal.sarif'

    - name: Scan YouTube Downloader image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test/youtube-downloader:latest'
        format: 'sarif'
        output: 'trivy-youtube-downloader.sarif'

    - name: Scan AI Agents image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test/ai-agents:latest'
        format: 'sarif'
        output: 'trivy-ai-agents.sarif'

    # 上传所有容器扫描结果
    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          trivy-n8n-core.sarif
          trivy-firebird-portal.sarif
          trivy-youtube-downloader.sarif
          trivy-ai-agents.sarif
        category: container-scan

  # 安全扫描报告汇总
  security-report:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [codeql-analyze, advanced-security-scan, secret-scan, dependency-scan]
    if: always()
    
    steps:
    - name: Download scan artifacts
      uses: actions/download-artifact@v3
      continue-on-error: true

    - name: Generate security report
      run: |
        echo "# 安全扫描报告" > security-report.md
        echo "" >> security-report.md
        echo "## 扫描结果概览" >> security-report.md
        echo "" >> security-report.md
        echo "| 扫描类型 | 状态 |" >> security-report.md
        echo "|---------|------|" >> security-report.md
        echo "| CodeQL分析 | ${{ needs.codeql-analyze.result }} |" >> security-report.md
        echo "| 高级安全扫描 | ${{ needs.advanced-security-scan.result }} |" >> security-report.md
        echo "| 密钥扫描 | ${{ needs.secret-scan.result }} |" >> security-report.md
        echo "| 依赖扫描 | ${{ needs.dependency-scan.result }} |" >> security-report.md
        echo "" >> security-report.md
        echo "## 建议" >> security-report.md
        echo "" >> security-report.md
        echo "- 定期更新依赖包" >> security-report.md
        echo "- 遵循安全编码最佳实践" >> security-report.md
        echo "- 定期进行安全审计" >> security-report.md
        echo "" >> security-report.md
        echo "生成时间: $(date)" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
